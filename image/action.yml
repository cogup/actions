name: "Image Deploy"
description: "Deploy image to AWS ECR"
inputs:
  repository-name:
    description: "Name of the repository"
    required: true
  context:
    description: "Path to the context"
    required: true
  file:
    description: "Path to the Dockerfile"
    required: false
    default: "Dockerfile"
  platforms:
    description: "Platforms to build for"
    required: false
    default: "linux/amd64,linux/arm64"
  role-to-assume:
    description: "Role to assume"
    required: true
  role-session-name:
    description: "Role session name"
    required: true
  aws-region:
    description: "AWS region"
    required: true
  tag:
    description: "Image tag"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      id: aws
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ inputs.role-session-name }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to ECR
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.aws.outputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.aws.outputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.repository-name }}
        tags: |
          latest
          ${{ inputs.tag }}

    - name: ls
      shell: bash
      run: ls -la

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: ${{ inputs.platforms }}
