name: Create Release
description: 'Create a new release with only the files you want'
inputs:
  version:
    description: 'The version of the package'
  github-token:
    description: 'The GitHub token to use for authentication'
    required: true
  add:
    description: 'Include files or directories to be added to the release'
    default: ''
  suffix:
    description: 'Suffix release name, ex: 1.0.1-alpha'
    default: ''
  prefix:
    description: 'Prefix release name, ex: v1.0.1'
    default: ''
outputs:
  release:
    value: ${{ inputs.prefix}}${{ steps.get_version.outputs.version }}${{ inputs.suffix }}
    description: 'Release version'
runs:
  using: "composite"
  steps:
      - name: Get App Version
        id: get_version
        shell: bash
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            echo "version=${{ inputs.prefix }}${{ inputs.version }}${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          elif [ -f package.json ]; then
            echo "version=${{ inputs.prefix }}$(node -p "require('./package.json').version")${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          elif [ -f Cargo.toml ]; then
            echo "version=${{ inputs.prefix }}$(grep -m1 -oP '(?<=version = \")[^\"]*' Cargo.toml)${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          elif [ -f setup.py ]; then
            echo "version=${{ inputs.prefix }}$(grep -m1 -oP '(?<=version=\")[^\"]*' setup.py)${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          elif [ -f version.txt ]; then
            echo "version=${{ inputs.prefix }}$(cat version.txt)${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          elif [ -f VERSION.txt ]; then
            echo "version=${{ inputs.prefix }}$(cat VERSION.txt)${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          elif [ -f VERSION.md ]; then
            echo "version=${{ inputs.prefix }}$(cat VERSION.md)${{ inputs.suffix }}" >> $GITHUB_OUTPUT
          fi

      - name: Check tag exists
        shell: bash
        id: tag_exists
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            if [ -n "$(git tag -l v${{ inputs.version }})" ]; then
              echo "tag_exists=true" >> $GITHUB_OUTPUT
            else
              echo "tag_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create branch and tag release
        if: steps.tag_exists.outputs.tag_exists == 'false'
        shell: bash
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ inputs.github-token }}@github.com/${{ github.repository }}

          mkdir release-${{ steps.get_version.outputs.version }}

          files="${{ inputs.add }}"
          IFS=$'\n,'
          read -a array_files <<< "$files"

          for file in "${array_files[@]}"; do
             mv $file release-${{ steps.get_version.outputs.version }}
          done

          mv .git release-${{ steps.get_version.outputs.version }}

          cd release-${{ steps.get_version.outputs.version }}

          git checkout -b "release/${{ steps.get_version.outputs.version }}"
          git add .
          git commit -m "Release ${{ steps.get_version.outputs.version }}"
          git push origin "release/${{ steps.get_version.outputs.version }}"

      - name: Create Release
        if: steps.tag_exists.outputs.tag_exists == 'false'
        shell: bash
        run: |
          repository=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          gh release create "$repository-${{ steps.get_version.outputs.version }}" --title "Release ${{ steps.get_version.outputs.version }}" --notes "Release ${{ steps.get_version.outputs.version }}" --repo ${{ github.repository }} --target release/${{ steps.get_version.outputs.version }} --latest

      - name: Remove branch release
        if: steps.tag_exists.outputs.tag_exists == 'false'
        shell: bash
        run: |
          cd release-${{ steps.get_version.outputs.version }}
          git push origin --delete "release/${{ steps.get_version.outputs.version }}"
