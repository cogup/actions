name: Create Release
description: 'Create a new release with only the files you want'
inputs:
  version:
    description: 'The version of the package'
  github-token:
    description: 'The GitHub token to use for authentication'
    required: true
  add:
    description: 'Include files or directories to be added to the release'
    default: ''
outputs:
  release:
    value: ${{ steps.get_version.outputs.version }}
    description: 'Release version'
runs:
  using: "composite"
  steps:
      - name: Get App Version
        id: get_version
        shell: bash
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          elif [ -f package.json ]; then
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          elif [ -f Cargo.toml ]; then
            echo "version=$(grep -m1 -oP '(?<=version = \")[^\"]*' Cargo.toml)" >> $GITHUB_OUTPUT
          elif [ -f setup.py ]; then
            echo "version=$(grep -m1 -oP '(?<=version=\")[^\"]*' setup.py)" >> $GITHUB_OUTPUT
          elif [ -f version.txt ]; then
            echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
          elif [ -f VERSION.txt ]; then
            echo "version=$(cat VERSION.txt)" >> $GITHUB_OUTPUT
          elif [ -f VERSION.md ]; then
            echo "version=$(cat VERSION.md)" >> $GITHUB_OUTPUT
          fi

      - name: Check tag exists
        shell: bash
        id: tag_exists
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            if [ -n "$(git tag -l v${{ inputs.version }})" ]; then
              echo "tag_exists=true" >> $GITHUB_OUTPUT
            else
              echo "tag_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create branch and tag release
        if: steps.tag_exists.outputs.tag_exists == 'false'
        shell: bash
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ inputs.github-token }}@github.com/${{ github.repository }}

          package="release-${{ steps.get_version.outputs.version }}"
          git checkout -b $package

          mkdir $package

          echo "Creating release ${{ steps.get_version.outputs.version }}"

          files="${{ inputs.add }}"
          IFS=$'\n,'
          read -a array_files <<< "$files"

          for file in "${array_files[@]}"; do
             mv $file $package
          done

          mv .git $package

          echo "Removing all files except $package"

          find . -mindepth 1 -maxdepth 1 ! -name '$package' -exec rm -r {} \;

          echo "Moving files back to root"

          mv $package/* .
          mv $package/.* .
          rm -rf $package

          echo "Committing changes"

          git add .

          git commit -m "Release ${{ steps.get_version.outputs.version }}"

          echo "Pushing changes"
          git tag release-${{ steps.get_version.outputs.version }}
          git push origin release-${{ steps.get_version.outputs.version }} --tags

      - name: Create Release
        if: steps.tag_exists.outputs.tag_exists == 'false'
        shell: bash
        run: |
          gh release create ${{ steps.get_version.outputs.version }} --title "Release ${{ steps.get_version.outputs.version }}" --notes "Release ${{ steps.get_version.outputs.version }}" --repo ${{ github.repository }} --target release-${{ steps.get_version.outputs.version }}